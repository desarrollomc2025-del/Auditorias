@page "/empresas/new"
@page "/empresas/{id:int}"
@inject IEmpresasService EmpresasService
@inject NavigationManager Nav

<PageTitle>Empresa</PageTitle>

<h3>@(isNew ? "Nueva empresa" : $"Editar empresa #{model.EmpresaId}")</h3>

@if (loading)
{
    <p>Cargando...</p>
}
else if (error is not null)
{
    <div class="alert alert-danger">@error</div>
}
else
{
    <EditForm Model="model" OnValidSubmit="Guardar">
        <div class="mb-3">
            <label class="form-label">Código</label>
            <input class="form-control" @bind-value="model.Codigo" />
        </div>
        <div class="mb-3">
            <label class="form-label">Nombre</label>
            <input class="form-control" @bind-value="model.Nombre" />
        </div>
        <div class="mb-3">
            <label class="form-label">Dirección</label>
            <input class="form-control" @bind-value="model.Direccion" />
        </div>
        <div class="form-check my-3">
            <input class="form-check-input" type="checkbox" id="elimE" @bind-value="model.Eliminado" />
            <label class="form-check-label" for="elimE">Eliminado</label>
        </div>
        <div class="mt-3">
            <button class="btn btn-primary" type="submit">Guardar</button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="Volver">Cancelar</button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public int? Id { get; set; }

    private bool isNew => !Id.HasValue;
    private bool loading = true;
    private string? error;
    private Empresa model = new()
    {
        Eliminado = false,
        FechaCreacion = DateTime.UtcNow
    };

    protected override async Task OnParametersSetAsync()
    {
        loading = true;
        error = null;
        try
        {
            if (Id is { } id && id > 0)
            {
                var existing = await EmpresasService.GetByIdAsync(id);
                if (existing is null)
                {
                    error = "No se encontró la empresa";
                }
                else
                {
                    model = existing;
                }
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    private async Task Guardar()
    {
        await EmpresasService.UpsertAsync(model);
        Volver();
    }

    private void Volver() => Nav.NavigateTo("/empresas");
}


@page "/preguntas/new"
@page "/preguntas/{id:int}"
@inject IPreguntasService PreguntasService
@inject ICategoriasService CategoriasService
@inject NavigationManager Nav

<PageTitle>Pregunta</PageTitle>

<h3>@(isNew ? "Nueva pregunta" : $"Editar pregunta #{model.PreguntaId}")</h3>

@if (loading)
{
    <p>Cargando...</p>
}
else if (error is not null)
{
    <div class="alert alert-danger">@error</div>
}
else
{
    <EditForm Model="model" OnValidSubmit="Guardar">
        <div class="mb-3">
            <label class="form-label">Categoría</label>
            <select class="form-select" @bind="model.CategoriaId">
                @foreach (var c in categorias)
                {
                    <option value="@c.CategoriaId">@c.Codigo - @c.Descripcion</option>
                }
            </select>
        </div>
        <div class="mb-3">
            <label class="form-label">Código</label>
            <input class="form-control" @bind-value="model.Codigo" />
        </div>
        <div class="mb-3">
            <label class="form-label">Texto</label>
            <input class="form-control" @bind-value="model.TextoPregunta" />
        </div>
        <div class="row">
            <div class="col">
                <label class="form-label">Ponderación</label>
                <input class="form-control" type="number" step="0.001" min="0" @bind-value="model.Ponderacion" />
            </div>
            <div class="col">
                <label class="form-label">Orden</label>
                <input class="form-control" type="number" min="0" @bind-value="model.Orden" />
            </div>
        </div>
        <div class="form-check my-3">
            <input class="form-check-input" type="checkbox" id="activoP" @bind-value="model.Activo" />
            <label class="form-check-label" for="activoP">Activo</label>
        </div>
        <div class="mt-3">
            <button class="btn btn-primary" type="submit">Guardar</button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="Volver">Cancelar</button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public int? Id { get; set; }

    private bool isNew => !Id.HasValue;
    private bool loading = true;
    private string? error;
    private Pregunta model = new()
    {
        Activo = true,
        FechaCreacion = DateTime.UtcNow,
        Ponderacion = 0m,
        Orden = 0
    };
    private List<Categoria> categorias = new();

    protected override async Task OnParametersSetAsync()
    {
        loading = true;
        error = null;
        try
        {
            categorias = (await CategoriasService.GetAllAsync()).ToList();
            if (Id is { } id && id > 0)
            {
                var existing = await PreguntasService.GetByIdAsync(id);
                if (existing is null)
                {
                    error = "No se encontró la pregunta";
                }
                else
                {
                    model = existing;
                }
            }
            else
            {
                if (categorias.Count > 0 && model.CategoriaId == 0)
                    model.CategoriaId = categorias[0].CategoriaId;
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    private async Task Guardar()
    {
        await PreguntasService.UpsertAsync(model);
        Volver();
    }

    private void Volver() => Nav.NavigateTo("/preguntas");
}


@page "/tiendas/new"
@page "/tiendas/{id:int}"
@inject ITiendasService TiendasService
@inject NavigationManager Nav

<PageTitle>Tienda</PageTitle>

<h3>@(isNew ? "Nueva tienda" : $"Editar tienda #{model.TiendaId}")</h3>

@if (loading)
{
    <p>Cargando...</p>
}
else if (error is not null)
{
    <div class="alert alert-danger">@error</div>
}
else
{
    <EditForm Model="model" OnValidSubmit="Guardar">
        <div class="mb-3">
            <label class="form-label">EmpresaId</label>
            <input class="form-control" type="number" @bind-value="model.EmpresaId" />
        </div>
        <div class="mb-3">
            <label class="form-label">Tipo de tienda</label>
            <select class="form-select" @bind="model.TipoTiendaId">
                @foreach (var tipo in tipos)
                {
                    <option value="@tipo.TipoTiendaId">@tipo.Nombre</option>
                }
            </select>
        </div>
        <div class="mb-3">
            <label class="form-label">C贸digo</label>
            <input class="form-control" @bind-value="model.Codigo" />
        </div>
        <div class="mb-3">
            <label class="form-label">C贸digo interno</label>
            <input class="form-control" @bind-value="model.CodigoInterno" />
        </div>
        <div class="mb-3">
            <label class="form-label">Descripci贸n</label>
            <input class="form-control" @bind-value="model.Descripcion" />
        </div>
        <div class="row">
            <div class="col">
                <label class="form-label">Latitud</label>
                <input class="form-control" type="number" step="any" @bind-value="model.Latitud" />
            </div>
            <div class="col">
                <label class="form-label">Longitud</label>
                <input class="form-control" type="number" step="any" @bind-value="model.Longitud" />
            </div>
        </div>
        <div class="form-check my-3">
            <input class="form-check-input" type="checkbox" id="elim" @bind-value="model.Eliminado" />
            <label class="form-check-label" for="elim">Eliminado</label>
        </div>
        <div class="mt-3">
            <button class="btn btn-primary" type="submit">Guardar</button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="Volver">Cancelar</button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public int? Id { get; set; }

    private bool isNew => !Id.HasValue;
    private bool loading = true;
    private string? error;
    private Tienda model = new()
    {
        Eliminado = false,
        FechaCreacion = DateTime.UtcNow
    };
    private List<TipoTienda> tipos = new();

    protected override async Task OnParametersSetAsync()
    {
        loading = true;
        error = null;
        try
        {
            // Cargar tipos tienda primero
            tipos = (await tiposService.GetAllAsync()).ToList();

            if (Id is { } id && id > 0)
            {
                var existing = await TiendasService.GetByIdAsync(id);
                if (existing is null)
                {
                    error = "No se encontr贸 la tienda";
                }
                else
                {
                    model = existing;
                }
            }
            else
            {
                // valor por defecto
                if (tipos.Count > 0 && model.TipoTiendaId == 0)
                    model.TipoTiendaId = tipos[0].TipoTiendaId;
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    [Inject] private ITiposTiendaService tiposService { get; set; } = default!;

    private async Task Guardar()
    {
        await TiendasService.UpsertAsync(model);
        Volver();
    }

    private void Volver() => Nav.NavigateTo("/tiendas");
}
